1.
Найдите количество вопросов, которые набрали больше 300 очков или как минимум 100 раз были добавлены в «Закладки».


SELECT COUNT(id)
FROM stackoverflow.posts 
WHERE post_type_id = 1
  AND (score > 300
       OR favorites_count >=100)
       
       
2.
Сколько в среднем в день задавали вопросов с 1 по 18 ноября 2008 включительно? Результат округлите до целого числа.

with qnt_post as 
(select count(id) as quantity,
       date_trunc ('day', creation_date::date) as dt
from stackoverflow.posts
where post_type_id = 1 
and (date_trunc ('day', creation_date::date) between '2008-11-01' and '2008-11-18')
group by dt)
select round(avg(quantity))
from qnt_post


3.
Сколько пользователей получили значки сразу в день регистрации? Выведите количество уникальных пользователей.

select count(distinct u.id)
from stackoverflow.users as u
join stackoverflow.badges as b on b.user_id = u.id
where date_trunc('day', b.creation_date)::date = date_trunc('day', u.creation_date)::date


4.
Сколько уникальных постов пользователя с именем Joel Coehoorn получили хотя бы один голос?

select count(distinct p.id)
FROM stackoverflow.posts AS p 
JOIN stackoverflow.users u ON p.user_id = u.id
JOIN stackoverflow.votes AS v ON p.id = v.post_id
where u.display_name='Joel Coehoorn'

5.
Выгрузите все поля таблицы vote_types. Добавьте к таблице поле rank, в которое войдут номера записей в обратном порядке. Таблица должна быть отсортирована по полю id.

select *,
       row_number() over (order by id desc) as rank
from stackoverflow.vote_types
order by id

6.
Отберите 10 пользователей, которые поставили больше всего голосов типа Close. Отобразите таблицу из двух полей: идентификатором пользователя и количеством голосов. Отсортируйте данные сначала по убыванию количества голосов, потом по убыванию значения идентификатора пользователя.

select u.id as usery,
       count(v.id) as votes_cht
from stackoverflow.users as u
join stackoverflow.votes as v on u.id = v.user_id
join stackoverflow.vote_types as vt on v.vote_type_id = vt.id
where vt.name = 'Close'
group by usery
order by votes_cht desc,
         u.id desc
limit 10

7.
Отберите 10 пользователей по количеству значков, полученных в период с 15 ноября по 15 декабря 2008 года включительно.
Отобразите несколько полей:
идентификатор пользователя;
число значков;
место в рейтинге — чем больше значков, тем выше рейтинг.
Пользователям, которые набрали одинаковое количество значков, присвойте одно и то же место в рейтинге.
Отсортируйте записи по количеству значков по убыванию, а затем по возрастанию значения идентификатора пользователя.

SELECT b.user_id AS users,
       COUNT(u.id) AS amount,
       dense_rank() OVER(ORDER BY COUNT(u.id) DESC) rn
FROM stackoverflow.badges AS b
JOIN stackoverflow.users AS u ON b.user_id=u.id
WHERE  DATE_TRUNC('day', b.creation_date) BETWEEN '2008-11-15' AND '2008-12-15'
GROUP BY b.user_id
ORDER BY amount DESC,
         users
LIMIT 10

8.
Сколько в среднем очков получает пост каждого пользователя?
Сформируйте таблицу из следующих полей:
заголовок поста;
идентификатор пользователя;
число очков поста;
среднее число очков пользователя за пост, округлённое до целого числа.
Не учитывайте посты без заголовка, а также те, что набрали ноль очков.

select title,
       user_id,
       score,
       round(avg(score) over (PARTITION by u.id)) as avg_score
FROM stackoverflow.users AS u
LEFT JOIN stackoverflow.posts AS p ON u.id=p.user_id
WHERE p.title IN(SELECT title
                                 FROM stackoverflow.posts)
    
AND p.score != 0



9.
Отобразите заголовки постов, которые были написаны пользователями, получившими более 1000 значков. Посты без заголовков не должны попасть в список.

select p.title
from stackoverflow.posts as p
join stackoverflow.users as u on p.user_id = u.id
join stackoverflow.badges as b on u.id = b.user_id
where p.title is not null
group by p.title 
having count(b.id) > 1000

10.
Напишите запрос, который выгрузит данные о пользователях из США (англ. United States). Разделите пользователей на три группы в зависимости от количества просмотров их профилей:
пользователям с числом просмотров больше либо равным 350 присвойте группу 1;
пользователям с числом просмотров меньше 350, но больше либо равно 100 — группу 2;
пользователям с числом просмотров меньше 100 — группу 3.
Отобразите в итоговой таблице идентификатор пользователя, количество просмотров профиля и группу. Пользователи с нулевым количеством просмотров не должны войти в итоговую таблицу.

select id,
       views,
       CASE
           when views >= 350 then 1
           when views < 100 then 3
           else 2
       end
from stackoverflow.users
where views != 0
and location like '%United States%'


11.
Дополните предыдущий запрос. Отобразите лидеров каждой группы — пользователей, которые набрали максимальное число просмотров в своей группе. Выведите поля с идентификатором пользователя, группой и количеством просмотров. Отсортируйте таблицу по убыванию просмотров, а затем по возрастанию значения идентификатора.

SELECT id,
       group_number,
       views
FROM (SELECT *,
             MAX(views) OVER (PARTITION BY group_number) AS max_value
      FROM (SELECT id,
                   views,
                   CASE 
                       WHEN views >= 350 THEN 1
                       WHEN views >= 100 THEN 2
                       ELSE 3
                   END AS group_number
            FROM stackoverflow.users AS u 
            WHERE location LIKE '%United States%' AND views> 0) AS a) AS foo
WHERE max_value = views
ORDER BY views DESC, id

12.
Посчитайте ежедневный прирост новых пользователей в ноябре 2008 года. Сформируйте таблицу с полями:
номер дня;
число пользователей, зарегистрированных в этот день;
сумму пользователей с накоплением.

SELECT *,
       SUM(count_usr) OVER (ORDER BY day_reg) AS cum_usr
 
FROM 
    (SELECT
 
        EXTRACT(DAY FROM creation_date) AS day_reg,
        COUNT(id) AS count_usr
 
    FROM stackoverflow.users
    WHERE EXTRACT(MONTH FROM creation_date) = 11 AND EXTRACT(YEAR FROM creation_date) = 2008
    GROUP BY EXTRACT(DAY FROM creation_date)) AS temp_table
    
13.
Для каждого пользователя, который написал хотя бы один пост, найдите интервал между регистрацией и временем создания первого поста. Отобразите:
идентификатор пользователя;
разницу во времени между регистрацией и первым постом.

select distinct p.user_id,
        first_value (p.creation_date) over (partition by p.user_id order by p.creation_date) - u.creation_date
from stackoverflow.posts as p
join stackoverflow.users as u on p.user_id = u.id
